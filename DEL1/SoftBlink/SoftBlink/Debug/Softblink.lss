
Softblink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000057e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000057e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000057e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000079e  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e5  00000000  00000000  00000dda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ec  00000000  00000000  000014bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  000017ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000429  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018a  00000000  00000000  00001cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_12>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  88:	0c 94 83 02 	jmp	0x506	; 0x506 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
    

}

ISR(TIMER1_COMPA_vect)						//Interrupt service routine (Set LED_ON)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
	LED_ON;
  9a:	5a 9a       	sbi	0x0b, 2	; 11
}
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <__vector_12>:

ISR(TIMER1_COMPB_vect)						//Interrupt service routine (Set LED_OFF)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
	LED_OFF;
  b0:	5a 98       	cbi	0x0b, 2	; 11
}
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <_Z13PWM_SoftBlinkv>:
	PWM_SoftBlink();
}

void PWM_SoftBlink(void)					//Counts up and down to increase or decrease the duty cycle of the LED
{
	uint16_t Duty = OCR1B;
  bc:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  c0:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	uint16_t Period= OCR1A;
  c4:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  c8:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	static uint8_t direction;

	switch(direction)
  cc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  d0:	22 23       	and	r18, r18
  d2:	19 f0       	breq	.+6      	; 0xda <_Z13PWM_SoftBlinkv+0x1e>
  d4:	21 30       	cpi	r18, 0x01	; 1
  d6:	59 f0       	breq	.+22     	; 0xee <_Z13PWM_SoftBlinkv+0x32>
  d8:	10 c0       	rjmp	.+32     	; 0xfa <_Z13PWM_SoftBlinkv+0x3e>
	{
		case UP:
		if (++Duty ==(Period-1))
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	41 50       	subi	r20, 0x01	; 1
  de:	51 09       	sbc	r21, r1
  e0:	84 17       	cp	r24, r20
  e2:	95 07       	cpc	r25, r21
  e4:	51 f4       	brne	.+20     	; 0xfa <_Z13PWM_SoftBlinkv+0x3e>
		direction=DOWN;
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
  ec:	06 c0       	rjmp	.+12     	; 0xfa <_Z13PWM_SoftBlinkv+0x3e>
		break;
		
		case DOWN:
		if(--Duty == 2)
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	91 05       	cpc	r25, r1
  f4:	11 f4       	brne	.+4      	; 0xfa <_Z13PWM_SoftBlinkv+0x3e>
		direction = UP;
  f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		break;
	}
	OCR1B = Duty;
  fa:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  fe:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 102:	08 95       	ret

00000104 <__vector_14>:
{
	LED_OFF;
}

ISR(TIMER0_COMPA_vect)						//Interrupt service routine (calls PWM)
{
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	4f 93       	push	r20
 114:	5f 93       	push	r21
 116:	6f 93       	push	r22
 118:	7f 93       	push	r23
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
	PWM_SoftBlink();
 126:	0e 94 5e 00 	call	0xbc	; 0xbc <_Z13PWM_SoftBlinkv>
}
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <_Z8PWM_Initv>:
	OCR1B = Duty;
}

void PWM_Init(void)							//Initializes the starting values of the PWM										
{
	TCCR1B |= (1<<CS10) | (1<<WGM12);		//no Prescalar, CTC mode
 14c:	e1 e8       	ldi	r30, 0x81	; 129
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	89 60       	ori	r24, 0x09	; 9
 154:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A)|(1<<OCIE1B);		//Output compare IRQ (OCIE1A turns on, OCIE1B turns off
 156:	ef e6       	ldi	r30, 0x6F	; 111
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	86 60       	ori	r24, 0x06	; 6
 15e:	80 83       	st	Z, r24
	OCR1A = 500;							//(F_CPU/1000*2*1 -1)
 160:	84 ef       	ldi	r24, 0xF4	; 244
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 168:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 0;
 16c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 170:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 174:	08 95       	ret

00000176 <_Z12millis_timerh>:
}

void millis_timer(uint8_t millis)			//Makes a millisecond timer from the clock frequency 
{
	TCCR0A |=(1<<WGM01);					//Set to CTC mode
 176:	94 b5       	in	r25, 0x24	; 36
 178:	92 60       	ori	r25, 0x02	; 2
 17a:	94 bd       	out	0x24, r25	; 36
	TCCR0B |=(1<<CS02) | (1<<CS00) ;		//Prescalar 1024
 17c:	95 b5       	in	r25, 0x25	; 37
 17e:	95 60       	ori	r25, 0x05	; 5
 180:	95 bd       	out	0x25, r25	; 37
	OCR0A = millis*0.48828-1;				//(millis*F_CPU/1000*2*1 -1)
 182:	68 2f       	mov	r22, r24
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 8a 01 	call	0x314	; 0x314 <__floatsisf>
 18e:	26 ed       	ldi	r18, 0xD6	; 214
 190:	3f ef       	ldi	r19, 0xFF	; 255
 192:	49 ef       	ldi	r20, 0xF9	; 249
 194:	5e e3       	ldi	r21, 0x3E	; 62
 196:	0e 94 16 02 	call	0x42c	; 0x42c <__mulsf3>
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	40 e8       	ldi	r20, 0x80	; 128
 1a0:	5f e3       	ldi	r21, 0x3F	; 63
 1a2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <__subsf3>
 1a6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__fixunssfsi>
 1aa:	67 bd       	out	0x27, r22	; 39
	TIMSK0 |=(1<<OCIE0A);					//Output compare IRQ
 1ac:	ee e6       	ldi	r30, 0x6E	; 110
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	80 83       	st	Z, r24
 1b6:	08 95       	ret

000001b8 <main>:
void millis_timer(uint8_t millis);


int main(void)
{
	sei();									//Enables interrupts by setting the global interrupt mask
 1b8:	78 94       	sei
	DDRB = 0x00;							//Configures Port B as an Input port
 1ba:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x00;							//Configures Port C as an Input port
 1bc:	17 b8       	out	0x07, r1	; 7
	DDRD = 0b00000100;						//Configures half of Port D as an Input and half as output
 1be:	84 e0       	ldi	r24, 0x04	; 4
 1c0:	8a b9       	out	0x0a, r24	; 10
	
	PORTB = 0xFF;							//Activates Pull up on all pins
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;							//Activates Pull up on all pins
 1c6:	88 b9       	out	0x08, r24	; 8
	PORTD = 0b11111011;						//Activates Pull up on the input pins
 1c8:	8b ef       	ldi	r24, 0xFB	; 251
 1ca:	8b b9       	out	0x0b, r24	; 11
	
	
	millis_timer(2);
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 bb 00 	call	0x176	; 0x176 <_Z12millis_timerh>
	PWM_Init();
 1d2:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z8PWM_Initv>
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <main+0x1e>

000001d8 <__subsf3>:
 1d8:	50 58       	subi	r21, 0x80	; 128

000001da <__addsf3>:
 1da:	bb 27       	eor	r27, r27
 1dc:	aa 27       	eor	r26, r26
 1de:	0e 94 04 01 	call	0x208	; 0x208 <__addsf3x>
 1e2:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__fp_round>
 1e6:	0e 94 ce 01 	call	0x39c	; 0x39c <__fp_pscA>
 1ea:	38 f0       	brcs	.+14     	; 0x1fa <__addsf3+0x20>
 1ec:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__fp_pscB>
 1f0:	20 f0       	brcs	.+8      	; 0x1fa <__addsf3+0x20>
 1f2:	39 f4       	brne	.+14     	; 0x202 <__addsf3+0x28>
 1f4:	9f 3f       	cpi	r25, 0xFF	; 255
 1f6:	19 f4       	brne	.+6      	; 0x1fe <__addsf3+0x24>
 1f8:	26 f4       	brtc	.+8      	; 0x202 <__addsf3+0x28>
 1fa:	0c 94 cb 01 	jmp	0x396	; 0x396 <__fp_nan>
 1fe:	0e f4       	brtc	.+2      	; 0x202 <__addsf3+0x28>
 200:	e0 95       	com	r30
 202:	e7 fb       	bst	r30, 7
 204:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__fp_inf>

00000208 <__addsf3x>:
 208:	e9 2f       	mov	r30, r25
 20a:	0e 94 ed 01 	call	0x3da	; 0x3da <__fp_split3>
 20e:	58 f3       	brcs	.-42     	; 0x1e6 <__addsf3+0xc>
 210:	ba 17       	cp	r27, r26
 212:	62 07       	cpc	r22, r18
 214:	73 07       	cpc	r23, r19
 216:	84 07       	cpc	r24, r20
 218:	95 07       	cpc	r25, r21
 21a:	20 f0       	brcs	.+8      	; 0x224 <__addsf3x+0x1c>
 21c:	79 f4       	brne	.+30     	; 0x23c <__addsf3x+0x34>
 21e:	a6 f5       	brtc	.+104    	; 0x288 <__addsf3x+0x80>
 220:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__fp_zero>
 224:	0e f4       	brtc	.+2      	; 0x228 <__addsf3x+0x20>
 226:	e0 95       	com	r30
 228:	0b 2e       	mov	r0, r27
 22a:	ba 2f       	mov	r27, r26
 22c:	a0 2d       	mov	r26, r0
 22e:	0b 01       	movw	r0, r22
 230:	b9 01       	movw	r22, r18
 232:	90 01       	movw	r18, r0
 234:	0c 01       	movw	r0, r24
 236:	ca 01       	movw	r24, r20
 238:	a0 01       	movw	r20, r0
 23a:	11 24       	eor	r1, r1
 23c:	ff 27       	eor	r31, r31
 23e:	59 1b       	sub	r21, r25
 240:	99 f0       	breq	.+38     	; 0x268 <__addsf3x+0x60>
 242:	59 3f       	cpi	r21, 0xF9	; 249
 244:	50 f4       	brcc	.+20     	; 0x25a <__addsf3x+0x52>
 246:	50 3e       	cpi	r21, 0xE0	; 224
 248:	68 f1       	brcs	.+90     	; 0x2a4 <__addsf3x+0x9c>
 24a:	1a 16       	cp	r1, r26
 24c:	f0 40       	sbci	r31, 0x00	; 0
 24e:	a2 2f       	mov	r26, r18
 250:	23 2f       	mov	r18, r19
 252:	34 2f       	mov	r19, r20
 254:	44 27       	eor	r20, r20
 256:	58 5f       	subi	r21, 0xF8	; 248
 258:	f3 cf       	rjmp	.-26     	; 0x240 <__addsf3x+0x38>
 25a:	46 95       	lsr	r20
 25c:	37 95       	ror	r19
 25e:	27 95       	ror	r18
 260:	a7 95       	ror	r26
 262:	f0 40       	sbci	r31, 0x00	; 0
 264:	53 95       	inc	r21
 266:	c9 f7       	brne	.-14     	; 0x25a <__addsf3x+0x52>
 268:	7e f4       	brtc	.+30     	; 0x288 <__addsf3x+0x80>
 26a:	1f 16       	cp	r1, r31
 26c:	ba 0b       	sbc	r27, r26
 26e:	62 0b       	sbc	r22, r18
 270:	73 0b       	sbc	r23, r19
 272:	84 0b       	sbc	r24, r20
 274:	ba f0       	brmi	.+46     	; 0x2a4 <__addsf3x+0x9c>
 276:	91 50       	subi	r25, 0x01	; 1
 278:	a1 f0       	breq	.+40     	; 0x2a2 <__addsf3x+0x9a>
 27a:	ff 0f       	add	r31, r31
 27c:	bb 1f       	adc	r27, r27
 27e:	66 1f       	adc	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	88 1f       	adc	r24, r24
 284:	c2 f7       	brpl	.-16     	; 0x276 <__addsf3x+0x6e>
 286:	0e c0       	rjmp	.+28     	; 0x2a4 <__addsf3x+0x9c>
 288:	ba 0f       	add	r27, r26
 28a:	62 1f       	adc	r22, r18
 28c:	73 1f       	adc	r23, r19
 28e:	84 1f       	adc	r24, r20
 290:	48 f4       	brcc	.+18     	; 0x2a4 <__addsf3x+0x9c>
 292:	87 95       	ror	r24
 294:	77 95       	ror	r23
 296:	67 95       	ror	r22
 298:	b7 95       	ror	r27
 29a:	f7 95       	ror	r31
 29c:	9e 3f       	cpi	r25, 0xFE	; 254
 29e:	08 f0       	brcs	.+2      	; 0x2a2 <__addsf3x+0x9a>
 2a0:	b0 cf       	rjmp	.-160    	; 0x202 <__addsf3+0x28>
 2a2:	93 95       	inc	r25
 2a4:	88 0f       	add	r24, r24
 2a6:	08 f0       	brcs	.+2      	; 0x2aa <__addsf3x+0xa2>
 2a8:	99 27       	eor	r25, r25
 2aa:	ee 0f       	add	r30, r30
 2ac:	97 95       	ror	r25
 2ae:	87 95       	ror	r24
 2b0:	08 95       	ret

000002b2 <__fixunssfsi>:
 2b2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__fp_splitA>
 2b6:	88 f0       	brcs	.+34     	; 0x2da <__fixunssfsi+0x28>
 2b8:	9f 57       	subi	r25, 0x7F	; 127
 2ba:	98 f0       	brcs	.+38     	; 0x2e2 <__fixunssfsi+0x30>
 2bc:	b9 2f       	mov	r27, r25
 2be:	99 27       	eor	r25, r25
 2c0:	b7 51       	subi	r27, 0x17	; 23
 2c2:	b0 f0       	brcs	.+44     	; 0x2f0 <__fixunssfsi+0x3e>
 2c4:	e1 f0       	breq	.+56     	; 0x2fe <__fixunssfsi+0x4c>
 2c6:	66 0f       	add	r22, r22
 2c8:	77 1f       	adc	r23, r23
 2ca:	88 1f       	adc	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	1a f0       	brmi	.+6      	; 0x2d6 <__fixunssfsi+0x24>
 2d0:	ba 95       	dec	r27
 2d2:	c9 f7       	brne	.-14     	; 0x2c6 <__fixunssfsi+0x14>
 2d4:	14 c0       	rjmp	.+40     	; 0x2fe <__fixunssfsi+0x4c>
 2d6:	b1 30       	cpi	r27, 0x01	; 1
 2d8:	91 f0       	breq	.+36     	; 0x2fe <__fixunssfsi+0x4c>
 2da:	0e 94 0f 02 	call	0x41e	; 0x41e <__fp_zero>
 2de:	b1 e0       	ldi	r27, 0x01	; 1
 2e0:	08 95       	ret
 2e2:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__fp_zero>
 2e6:	67 2f       	mov	r22, r23
 2e8:	78 2f       	mov	r23, r24
 2ea:	88 27       	eor	r24, r24
 2ec:	b8 5f       	subi	r27, 0xF8	; 248
 2ee:	39 f0       	breq	.+14     	; 0x2fe <__fixunssfsi+0x4c>
 2f0:	b9 3f       	cpi	r27, 0xF9	; 249
 2f2:	cc f3       	brlt	.-14     	; 0x2e6 <__fixunssfsi+0x34>
 2f4:	86 95       	lsr	r24
 2f6:	77 95       	ror	r23
 2f8:	67 95       	ror	r22
 2fa:	b3 95       	inc	r27
 2fc:	d9 f7       	brne	.-10     	; 0x2f4 <__fixunssfsi+0x42>
 2fe:	3e f4       	brtc	.+14     	; 0x30e <__fixunssfsi+0x5c>
 300:	90 95       	com	r25
 302:	80 95       	com	r24
 304:	70 95       	com	r23
 306:	61 95       	neg	r22
 308:	7f 4f       	sbci	r23, 0xFF	; 255
 30a:	8f 4f       	sbci	r24, 0xFF	; 255
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	08 95       	ret

00000310 <__floatunsisf>:
 310:	e8 94       	clt
 312:	09 c0       	rjmp	.+18     	; 0x326 <__floatsisf+0x12>

00000314 <__floatsisf>:
 314:	97 fb       	bst	r25, 7
 316:	3e f4       	brtc	.+14     	; 0x326 <__floatsisf+0x12>
 318:	90 95       	com	r25
 31a:	80 95       	com	r24
 31c:	70 95       	com	r23
 31e:	61 95       	neg	r22
 320:	7f 4f       	sbci	r23, 0xFF	; 255
 322:	8f 4f       	sbci	r24, 0xFF	; 255
 324:	9f 4f       	sbci	r25, 0xFF	; 255
 326:	99 23       	and	r25, r25
 328:	a9 f0       	breq	.+42     	; 0x354 <__floatsisf+0x40>
 32a:	f9 2f       	mov	r31, r25
 32c:	96 e9       	ldi	r25, 0x96	; 150
 32e:	bb 27       	eor	r27, r27
 330:	93 95       	inc	r25
 332:	f6 95       	lsr	r31
 334:	87 95       	ror	r24
 336:	77 95       	ror	r23
 338:	67 95       	ror	r22
 33a:	b7 95       	ror	r27
 33c:	f1 11       	cpse	r31, r1
 33e:	f8 cf       	rjmp	.-16     	; 0x330 <__floatsisf+0x1c>
 340:	fa f4       	brpl	.+62     	; 0x380 <__floatsisf+0x6c>
 342:	bb 0f       	add	r27, r27
 344:	11 f4       	brne	.+4      	; 0x34a <__floatsisf+0x36>
 346:	60 ff       	sbrs	r22, 0
 348:	1b c0       	rjmp	.+54     	; 0x380 <__floatsisf+0x6c>
 34a:	6f 5f       	subi	r22, 0xFF	; 255
 34c:	7f 4f       	sbci	r23, 0xFF	; 255
 34e:	8f 4f       	sbci	r24, 0xFF	; 255
 350:	9f 4f       	sbci	r25, 0xFF	; 255
 352:	16 c0       	rjmp	.+44     	; 0x380 <__floatsisf+0x6c>
 354:	88 23       	and	r24, r24
 356:	11 f0       	breq	.+4      	; 0x35c <__floatsisf+0x48>
 358:	96 e9       	ldi	r25, 0x96	; 150
 35a:	11 c0       	rjmp	.+34     	; 0x37e <__floatsisf+0x6a>
 35c:	77 23       	and	r23, r23
 35e:	21 f0       	breq	.+8      	; 0x368 <__floatsisf+0x54>
 360:	9e e8       	ldi	r25, 0x8E	; 142
 362:	87 2f       	mov	r24, r23
 364:	76 2f       	mov	r23, r22
 366:	05 c0       	rjmp	.+10     	; 0x372 <__floatsisf+0x5e>
 368:	66 23       	and	r22, r22
 36a:	71 f0       	breq	.+28     	; 0x388 <__floatsisf+0x74>
 36c:	96 e8       	ldi	r25, 0x86	; 134
 36e:	86 2f       	mov	r24, r22
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	2a f0       	brmi	.+10     	; 0x380 <__floatsisf+0x6c>
 376:	9a 95       	dec	r25
 378:	66 0f       	add	r22, r22
 37a:	77 1f       	adc	r23, r23
 37c:	88 1f       	adc	r24, r24
 37e:	da f7       	brpl	.-10     	; 0x376 <__floatsisf+0x62>
 380:	88 0f       	add	r24, r24
 382:	96 95       	lsr	r25
 384:	87 95       	ror	r24
 386:	97 f9       	bld	r25, 7
 388:	08 95       	ret

0000038a <__fp_inf>:
 38a:	97 f9       	bld	r25, 7
 38c:	9f 67       	ori	r25, 0x7F	; 127
 38e:	80 e8       	ldi	r24, 0x80	; 128
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	08 95       	ret

00000396 <__fp_nan>:
 396:	9f ef       	ldi	r25, 0xFF	; 255
 398:	80 ec       	ldi	r24, 0xC0	; 192
 39a:	08 95       	ret

0000039c <__fp_pscA>:
 39c:	00 24       	eor	r0, r0
 39e:	0a 94       	dec	r0
 3a0:	16 16       	cp	r1, r22
 3a2:	17 06       	cpc	r1, r23
 3a4:	18 06       	cpc	r1, r24
 3a6:	09 06       	cpc	r0, r25
 3a8:	08 95       	ret

000003aa <__fp_pscB>:
 3aa:	00 24       	eor	r0, r0
 3ac:	0a 94       	dec	r0
 3ae:	12 16       	cp	r1, r18
 3b0:	13 06       	cpc	r1, r19
 3b2:	14 06       	cpc	r1, r20
 3b4:	05 06       	cpc	r0, r21
 3b6:	08 95       	ret

000003b8 <__fp_round>:
 3b8:	09 2e       	mov	r0, r25
 3ba:	03 94       	inc	r0
 3bc:	00 0c       	add	r0, r0
 3be:	11 f4       	brne	.+4      	; 0x3c4 <__fp_round+0xc>
 3c0:	88 23       	and	r24, r24
 3c2:	52 f0       	brmi	.+20     	; 0x3d8 <__fp_round+0x20>
 3c4:	bb 0f       	add	r27, r27
 3c6:	40 f4       	brcc	.+16     	; 0x3d8 <__fp_round+0x20>
 3c8:	bf 2b       	or	r27, r31
 3ca:	11 f4       	brne	.+4      	; 0x3d0 <__fp_round+0x18>
 3cc:	60 ff       	sbrs	r22, 0
 3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <__fp_round+0x20>
 3d0:	6f 5f       	subi	r22, 0xFF	; 255
 3d2:	7f 4f       	sbci	r23, 0xFF	; 255
 3d4:	8f 4f       	sbci	r24, 0xFF	; 255
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	08 95       	ret

000003da <__fp_split3>:
 3da:	57 fd       	sbrc	r21, 7
 3dc:	90 58       	subi	r25, 0x80	; 128
 3de:	44 0f       	add	r20, r20
 3e0:	55 1f       	adc	r21, r21
 3e2:	59 f0       	breq	.+22     	; 0x3fa <__fp_splitA+0x10>
 3e4:	5f 3f       	cpi	r21, 0xFF	; 255
 3e6:	71 f0       	breq	.+28     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3e8:	47 95       	ror	r20

000003ea <__fp_splitA>:
 3ea:	88 0f       	add	r24, r24
 3ec:	97 fb       	bst	r25, 7
 3ee:	99 1f       	adc	r25, r25
 3f0:	61 f0       	breq	.+24     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3f2:	9f 3f       	cpi	r25, 0xFF	; 255
 3f4:	79 f0       	breq	.+30     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3f6:	87 95       	ror	r24
 3f8:	08 95       	ret
 3fa:	12 16       	cp	r1, r18
 3fc:	13 06       	cpc	r1, r19
 3fe:	14 06       	cpc	r1, r20
 400:	55 1f       	adc	r21, r21
 402:	f2 cf       	rjmp	.-28     	; 0x3e8 <__fp_split3+0xe>
 404:	46 95       	lsr	r20
 406:	f1 df       	rcall	.-30     	; 0x3ea <__fp_splitA>
 408:	08 c0       	rjmp	.+16     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40a:	16 16       	cp	r1, r22
 40c:	17 06       	cpc	r1, r23
 40e:	18 06       	cpc	r1, r24
 410:	99 1f       	adc	r25, r25
 412:	f1 cf       	rjmp	.-30     	; 0x3f6 <__fp_splitA+0xc>
 414:	86 95       	lsr	r24
 416:	71 05       	cpc	r23, r1
 418:	61 05       	cpc	r22, r1
 41a:	08 94       	sec
 41c:	08 95       	ret

0000041e <__fp_zero>:
 41e:	e8 94       	clt

00000420 <__fp_szero>:
 420:	bb 27       	eor	r27, r27
 422:	66 27       	eor	r22, r22
 424:	77 27       	eor	r23, r23
 426:	cb 01       	movw	r24, r22
 428:	97 f9       	bld	r25, 7
 42a:	08 95       	ret

0000042c <__mulsf3>:
 42c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3x>
 430:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__fp_round>
 434:	0e 94 ce 01 	call	0x39c	; 0x39c <__fp_pscA>
 438:	38 f0       	brcs	.+14     	; 0x448 <__mulsf3+0x1c>
 43a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__fp_pscB>
 43e:	20 f0       	brcs	.+8      	; 0x448 <__mulsf3+0x1c>
 440:	95 23       	and	r25, r21
 442:	11 f0       	breq	.+4      	; 0x448 <__mulsf3+0x1c>
 444:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__fp_inf>
 448:	0c 94 cb 01 	jmp	0x396	; 0x396 <__fp_nan>
 44c:	11 24       	eor	r1, r1
 44e:	0c 94 10 02 	jmp	0x420	; 0x420 <__fp_szero>

00000452 <__mulsf3x>:
 452:	0e 94 ed 01 	call	0x3da	; 0x3da <__fp_split3>
 456:	70 f3       	brcs	.-36     	; 0x434 <__mulsf3+0x8>

00000458 <__mulsf3_pse>:
 458:	95 9f       	mul	r25, r21
 45a:	c1 f3       	breq	.-16     	; 0x44c <__mulsf3+0x20>
 45c:	95 0f       	add	r25, r21
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	55 1f       	adc	r21, r21
 462:	62 9f       	mul	r22, r18
 464:	f0 01       	movw	r30, r0
 466:	72 9f       	mul	r23, r18
 468:	bb 27       	eor	r27, r27
 46a:	f0 0d       	add	r31, r0
 46c:	b1 1d       	adc	r27, r1
 46e:	63 9f       	mul	r22, r19
 470:	aa 27       	eor	r26, r26
 472:	f0 0d       	add	r31, r0
 474:	b1 1d       	adc	r27, r1
 476:	aa 1f       	adc	r26, r26
 478:	64 9f       	mul	r22, r20
 47a:	66 27       	eor	r22, r22
 47c:	b0 0d       	add	r27, r0
 47e:	a1 1d       	adc	r26, r1
 480:	66 1f       	adc	r22, r22
 482:	82 9f       	mul	r24, r18
 484:	22 27       	eor	r18, r18
 486:	b0 0d       	add	r27, r0
 488:	a1 1d       	adc	r26, r1
 48a:	62 1f       	adc	r22, r18
 48c:	73 9f       	mul	r23, r19
 48e:	b0 0d       	add	r27, r0
 490:	a1 1d       	adc	r26, r1
 492:	62 1f       	adc	r22, r18
 494:	83 9f       	mul	r24, r19
 496:	a0 0d       	add	r26, r0
 498:	61 1d       	adc	r22, r1
 49a:	22 1f       	adc	r18, r18
 49c:	74 9f       	mul	r23, r20
 49e:	33 27       	eor	r19, r19
 4a0:	a0 0d       	add	r26, r0
 4a2:	61 1d       	adc	r22, r1
 4a4:	23 1f       	adc	r18, r19
 4a6:	84 9f       	mul	r24, r20
 4a8:	60 0d       	add	r22, r0
 4aa:	21 1d       	adc	r18, r1
 4ac:	82 2f       	mov	r24, r18
 4ae:	76 2f       	mov	r23, r22
 4b0:	6a 2f       	mov	r22, r26
 4b2:	11 24       	eor	r1, r1
 4b4:	9f 57       	subi	r25, 0x7F	; 127
 4b6:	50 40       	sbci	r21, 0x00	; 0
 4b8:	9a f0       	brmi	.+38     	; 0x4e0 <__mulsf3_pse+0x88>
 4ba:	f1 f0       	breq	.+60     	; 0x4f8 <__mulsf3_pse+0xa0>
 4bc:	88 23       	and	r24, r24
 4be:	4a f0       	brmi	.+18     	; 0x4d2 <__mulsf3_pse+0x7a>
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	bb 1f       	adc	r27, r27
 4c6:	66 1f       	adc	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	88 1f       	adc	r24, r24
 4cc:	91 50       	subi	r25, 0x01	; 1
 4ce:	50 40       	sbci	r21, 0x00	; 0
 4d0:	a9 f7       	brne	.-22     	; 0x4bc <__mulsf3_pse+0x64>
 4d2:	9e 3f       	cpi	r25, 0xFE	; 254
 4d4:	51 05       	cpc	r21, r1
 4d6:	80 f0       	brcs	.+32     	; 0x4f8 <__mulsf3_pse+0xa0>
 4d8:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__fp_inf>
 4dc:	0c 94 10 02 	jmp	0x420	; 0x420 <__fp_szero>
 4e0:	5f 3f       	cpi	r21, 0xFF	; 255
 4e2:	e4 f3       	brlt	.-8      	; 0x4dc <__mulsf3_pse+0x84>
 4e4:	98 3e       	cpi	r25, 0xE8	; 232
 4e6:	d4 f3       	brlt	.-12     	; 0x4dc <__mulsf3_pse+0x84>
 4e8:	86 95       	lsr	r24
 4ea:	77 95       	ror	r23
 4ec:	67 95       	ror	r22
 4ee:	b7 95       	ror	r27
 4f0:	f7 95       	ror	r31
 4f2:	e7 95       	ror	r30
 4f4:	9f 5f       	subi	r25, 0xFF	; 255
 4f6:	c1 f7       	brne	.-16     	; 0x4e8 <__mulsf3_pse+0x90>
 4f8:	fe 2b       	or	r31, r30
 4fa:	88 0f       	add	r24, r24
 4fc:	91 1d       	adc	r25, r1
 4fe:	96 95       	lsr	r25
 500:	87 95       	ror	r24
 502:	97 f9       	bld	r25, 7
 504:	08 95       	ret

00000506 <_exit>:
 506:	f8 94       	cli

00000508 <__stop_program>:
 508:	ff cf       	rjmp	.-2      	; 0x508 <__stop_program>
