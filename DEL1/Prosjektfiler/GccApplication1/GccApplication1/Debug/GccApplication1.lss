
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000134  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000769  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069d  00000000  00000000  000009a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000292  00000000  00000000  00001046  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ec  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000068  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
int period = 1000;
int dutyCycle = 1;

int main(void)
{
	DDRD = 0x04; // Set PD2 as output
  96:	84 e0       	ldi	r24, 0x04	; 4
  98:	8a b9       	out	0x0a, r24	; 10
    {
		for(int ii = 0; ii <= period; ++ii)
		{
			if(ii - sB <= dutyCycle)
			{
				PORTD = 0x04;	
  9a:	64 e0       	ldi	r22, 0x04	; 4
int main(void)
{
	DDRD = 0x04; // Set PD2 as output
    while (1) 
    {
		for(int ii = 0; ii <= period; ++ii)
  9c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <period>
  a0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <period+0x1>
  a4:	99 23       	and	r25, r25
  a6:	e4 f0       	brlt	.+56     	; 0xe0 <main+0x4a>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
		{
			if(ii - sB <= dutyCycle)
  ac:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <sB>
  b0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <sB+0x1>
  b4:	ac 01       	movw	r20, r24
  b6:	42 1b       	sub	r20, r18
  b8:	53 0b       	sbc	r21, r19
  ba:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
  be:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
  c2:	24 17       	cp	r18, r20
  c4:	35 07       	cpc	r19, r21
  c6:	14 f0       	brlt	.+4      	; 0xcc <main+0x36>
			{
				PORTD = 0x04;	
  c8:	6b b9       	out	0x0b, r22	; 11
  ca:	01 c0       	rjmp	.+2      	; 0xce <main+0x38>
			}
			
			else 
			{
				PORTD = 0x00;
  cc:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	00 00       	nop
int main(void)
{
	DDRD = 0x04; // Set PD2 as output
    while (1) 
    {
		for(int ii = 0; ii <= period; ++ii)
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <period>
  d6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <period+0x1>
  da:	28 17       	cp	r18, r24
  dc:	39 07       	cpc	r19, r25
  de:	34 f7       	brge	.-52     	; 0xac <main+0x16>
			
			_delay_us(1);
			
		}
		
				if(a%2 == 0)
  e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <a>
  e4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <a+0x1>
  e8:	80 fd       	sbrc	r24, 0
  ea:	0b c0       	rjmp	.+22     	; 0x102 <main+0x6c>
				{
					sB++;
  ec:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <sB>
  f0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <sB+0x1>
  f4:	2f 5f       	subi	r18, 0xFF	; 255
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
  f8:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <sB+0x1>
  fc:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <sB>
 100:	0a c0       	rjmp	.+20     	; 0x116 <main+0x80>
				}
				
				else
				{
					sB--;
 102:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <sB>
 106:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <sB+0x1>
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	31 09       	sbc	r19, r1
 10e:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <sB+0x1>
 112:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <sB>
				}
		if(sB == 0)
 116:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <sB>
 11a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <sB+0x1>
 11e:	23 2b       	or	r18, r19
 120:	09 f0       	breq	.+2      	; 0x124 <main+0x8e>
 122:	bc cf       	rjmp	.-136    	; 0x9c <main+0x6>
		}


		if(sB == 0)
		{
			a++;
 124:	02 96       	adiw	r24, 0x02	; 2
 126:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <a+0x1>
 12a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <a>
 12e:	b6 cf       	rjmp	.-148    	; 0x9c <main+0x6>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
